name: RDP via PageKite (stable)

on:
  workflow_dispatch:

jobs:
  rdp-pagekite:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Validate required secrets
        shell: pwsh
        env:
          PAGEKITE_SECRET: ${{ secrets.PAGEKITE_SECRET }}
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          if (-not $env:PAGEKITE_SECRET) { Write-Error "Add secret PAGEKITE_SECRET in repo Settings → Secrets"; exit 1 }
          if (-not $env:RDP_PASSWORD) { Write-Error "Add secret RDP_PASSWORD in repo Settings → Secrets"; exit 1 }
          Write-Host "Secrets present."

      - name: Enable Remote Desktop & create user
        shell: pwsh
        env:
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          Write-Host "Enabling Remote Desktop and firewall..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force
          netsh advfirewall firewall add rule name="Allow RDP (pagekite)" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -ErrorAction SilentlyContinue

          $username = "rdpuser"
          $pwd = $env:RDP_PASSWORD
          $secure = ConvertTo-SecureString $pwd -AsPlainText -Force
          if (-not (Get-LocalUser -Name $username -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $username -Password $secure -AccountNeverExpires -PasswordNeverExpires
            Write-Host "User created: $username"
          } else {
            Get-LocalUser -Name $username | Set-LocalUser -Password $secure
            Write-Host "User exists — password updated"
          }
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue

      - name: Setup Python 3.10 (required for pagekite.py)
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Download pagekite.py
        shell: pwsh
        run: |
          $outDir = "C:\pagekite"
          New-Item -Path $outDir -ItemType Directory -Force | Out-Null
          $script = Join-Path $outDir "pagekite.py"
          Write-Host "Downloading pagekite.py ..."
          Invoke-WebRequest -Uri "https://pagekite.net/pk/pagekite.py" -OutFile $script -UseBasicParsing
          Write-Host "Saved pagekite to $script"
          python --version

      - name: Start PageKite (try multiple formats) and capture logs
        shell: pwsh
        env:
          PAGEKITE_SECRET: ${{ secrets.PAGEKITE_SECRET }}
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          $script = "C:\pagekite\pagekite.py"
          $sub = "rdpuser.pagekite.me"   # <-- غَيّر هنا لو غيرت ال-subdomain
          $secret = $env:PAGEKITE_SECRET
          $outLog = "C:\pagekite\out.log"
          $errLog = "C:\pagekite\err.log"

          if (-not (Test-Path $script)) { Write-Error "pagekite.py not found at $script"; exit 1 }

          $formats = @(
            "3389 $($sub):$($secret)",
            "3389 $($sub.Split('.')[0]):$($secret)@pagekite.net",
            "3389 $($sub.Split('.')[0]):$($secret)@pagekite.me",
            "3389 $($sub.Split('.')[0]):$($secret)"
          )

          $success = $false
          foreach ($f in $formats) {
            Remove-Item $outLog -ErrorAction SilentlyContinue
            Remove-Item $errLog -ErrorAction SilentlyContinue

            Write-Host "Trying format: python $script $f"
            $proc = Start-Process -FilePath "python" -ArgumentList "$script $f" -NoNewWindow -RedirectStandardOutput $outLog -RedirectStandardError $errLog -PassThru

            # give it some time to initialize and write output
            Start-Sleep -Seconds 8

            $ok = $false
            $t = 0
            while ($t -lt 40 -and -not $ok) {
              Start-Sleep -Seconds 2
              $t += 2
              if (Test-Path $outLog) {
                $txt = Get-Content $outLog -Raw -ErrorAction SilentlyContinue
                if ($txt -match [regex]::Escape($sub) -or $txt -match "listening on|Forwarding|Now serving|Connected|listening") {
                  Write-Host "PageKite output indicates success for format: $f"
                  $ok = $true
                  $success = $true
                  break
                }
              }
              if (Test-Path $errLog) {
                $et = Get-Content $errLog -Raw -ErrorAction SilentlyContinue
                if ($et -match "error|denied|failed|permission|Not valid domain|Unanswerable") {
                  Write-Host "PageKite error detected (will try next format if any):"
                  Write-Host $et
                  break
                }
              }
            }

            if ($ok) {
              Write-Host "Succeeded with format: $f"
              break
            } else {
              try { if (-not $proc.HasExited) { $proc.Kill() } } catch {}
              Write-Host "Format failed, trying next..."
            }
          }

          if (-not $success) {
            Write-Host "===== pagekite OUT (tail 200) ====="
            if (Test-Path $outLog) { Get-Content $outLog -Tail 200 } else { Write-Host "(no out log)" }
            Write-Host "===== pagekite ERR (tail 200) ====="
            if (Test-Path $errLog) { Get-Content $errLog -Tail 200 } else { Write-Host "(no err log)" }
            throw "All PageKite formats failed — check PAGEKITE_SECRET and subdomain name"
          }

          # save credentials and export host
          $cred = "C:\rdp_credentials.txt"
          "Host: $sub:3389" | Out-File $cred -Encoding UTF8
          "Username: rdpuser" | Out-File $cred -Append -Encoding UTF8
          "Password: $env:RDP_PASSWORD" | Out-File $cred -Append -Encoding UTF8
          Write-Host "Saved credentials to $cred"
          echo "PAGEKITE_HOST=$sub" >> $env:GITHUB_ENV

      - name: Upload logs & credentials
        uses: actions/upload-artifact@v4
        with:
          name: pagekite-artifacts
          path: |
            C:\pagekite\out.log
            C:\pagekite\err.log
            C:\rdp_credentials.txt

      - name: Final output (print final lines) and keep job alive
        shell: pwsh
        env:
          PAGEKITE_HOST: ${{ env.PAGEKITE_HOST }}
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          Write-Host ""
          Write-Host "=== RDP ACCESS ==="
          Write-Host "HOST: $env:PAGEKITE_HOST:3389"
          Write-Host "USERNAME: rdpuser"
          Write-Host "PASSWORD: $env:RDP_PASSWORD"
          Write-Host "==================="
          Write-Host ""
          Write-Host "Artifacts (logs + credentials) uploaded to the run artifacts."
          # keep job alive so tunnel stays up (cancel run to stop)
          while ($true) { Start-Sleep -Seconds 300 }
